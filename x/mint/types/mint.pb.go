// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mint/v1beta1/mint.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Minter represents the most recent
type Minter struct {
	StartDate           string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate             string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Denom               string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	TotalMintAmount     uint64 `protobuf:"varint,4,opt,name=total_mint_amount,json=totalMintAmount,proto3" json:"total_mint_amount,omitempty"`
	RemainingMintAmount uint64 `protobuf:"varint,5,opt,name=remaining_mint_amount,json=remainingMintAmount,proto3" json:"remaining_mint_amount,omitempty"`
	LastMintAmount      uint64 `protobuf:"varint,6,opt,name=last_mint_amount,json=lastMintAmount,proto3" json:"last_mint_amount,omitempty"`
	LastMintDate        string `protobuf:"bytes,7,opt,name=last_mint_date,json=lastMintDate,proto3" json:"last_mint_date,omitempty"`
	LastMintHeight      uint64 `protobuf:"varint,8,opt,name=last_mint_height,json=lastMintHeight,proto3" json:"last_mint_height,omitempty"`
}

func (m *Minter) Reset()         { *m = Minter{} }
func (m *Minter) String() string { return proto.CompactTextString(m) }
func (*Minter) ProtoMessage()    {}
func (*Minter) Descriptor() ([]byte, []int) {
	return fileDescriptor_06339c129491fd39, []int{0}
}
func (m *Minter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minter.Merge(m, src)
}
func (m *Minter) XXX_Size() int {
	return m.Size()
}
func (m *Minter) XXX_DiscardUnknown() {
	xxx_messageInfo_Minter.DiscardUnknown(m)
}

var xxx_messageInfo_Minter proto.InternalMessageInfo

func (m *Minter) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Minter) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *Minter) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Minter) GetTotalMintAmount() uint64 {
	if m != nil {
		return m.TotalMintAmount
	}
	return 0
}

func (m *Minter) GetRemainingMintAmount() uint64 {
	if m != nil {
		return m.RemainingMintAmount
	}
	return 0
}

func (m *Minter) GetLastMintAmount() uint64 {
	if m != nil {
		return m.LastMintAmount
	}
	return 0
}

func (m *Minter) GetLastMintDate() string {
	if m != nil {
		return m.LastMintDate
	}
	return ""
}

func (m *Minter) GetLastMintHeight() uint64 {
	if m != nil {
		return m.LastMintHeight
	}
	return 0
}

type ScheduledTokenRelease struct {
	StartDate          string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate            string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	TokenReleaseAmount uint64 `protobuf:"varint,3,opt,name=token_release_amount,json=tokenReleaseAmount,proto3" json:"token_release_amount,omitempty"`
}

func (m *ScheduledTokenRelease) Reset()         { *m = ScheduledTokenRelease{} }
func (m *ScheduledTokenRelease) String() string { return proto.CompactTextString(m) }
func (*ScheduledTokenRelease) ProtoMessage()    {}
func (*ScheduledTokenRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_06339c129491fd39, []int{1}
}
func (m *ScheduledTokenRelease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledTokenRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduledTokenRelease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduledTokenRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledTokenRelease.Merge(m, src)
}
func (m *ScheduledTokenRelease) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledTokenRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledTokenRelease.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledTokenRelease proto.InternalMessageInfo

func (m *ScheduledTokenRelease) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *ScheduledTokenRelease) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *ScheduledTokenRelease) GetTokenReleaseAmount() uint64 {
	if m != nil {
		return m.TokenReleaseAmount
	}
	return 0
}

// Params holds parameters for the mint module.
type Params struct {
	// type of coin to mint
	MintDenom string `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	// List of token release schedules
	TokenReleaseSchedule []ScheduledTokenRelease `protobuf:"bytes,2,rep,name=token_release_schedule,json=tokenReleaseSchedule,proto3" json:"token_release_schedule" yaml:"token_release_schedule"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_06339c129491fd39, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *Params) GetTokenReleaseSchedule() []ScheduledTokenRelease {
	if m != nil {
		return m.TokenReleaseSchedule
	}
	return nil
}

// Minter represents the most recent
type Version2Minter struct {
	LastMintAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=last_mint_amount,json=lastMintAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_mint_amount" yaml:"last_mint_amount"`
	LastMintDate   string                                 `protobuf:"bytes,2,opt,name=last_mint_date,json=lastMintDate,proto3" json:"last_mint_date,omitempty" yaml:"last_mint_date"`
	LastMintHeight int64                                  `protobuf:"varint,3,opt,name=last_mint_height,json=lastMintHeight,proto3" json:"last_mint_height,omitempty" yaml:"last_mint_height"`
	Denom          string                                 `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
}

func (m *Version2Minter) Reset()         { *m = Version2Minter{} }
func (m *Version2Minter) String() string { return proto.CompactTextString(m) }
func (*Version2Minter) ProtoMessage()    {}
func (*Version2Minter) Descriptor() ([]byte, []int) {
	return fileDescriptor_06339c129491fd39, []int{3}
}
func (m *Version2Minter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version2Minter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version2Minter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Version2Minter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version2Minter.Merge(m, src)
}
func (m *Version2Minter) XXX_Size() int {
	return m.Size()
}
func (m *Version2Minter) XXX_DiscardUnknown() {
	xxx_messageInfo_Version2Minter.DiscardUnknown(m)
}

var xxx_messageInfo_Version2Minter proto.InternalMessageInfo

func (m *Version2Minter) GetLastMintDate() string {
	if m != nil {
		return m.LastMintDate
	}
	return ""
}

func (m *Version2Minter) GetLastMintHeight() int64 {
	if m != nil {
		return m.LastMintHeight
	}
	return 0
}

func (m *Version2Minter) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type Version2ScheduledTokenRelease struct {
	Date               string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TokenReleaseAmount int64  `protobuf:"varint,2,opt,name=token_release_amount,json=tokenReleaseAmount,proto3" json:"token_release_amount,omitempty"`
}

func (m *Version2ScheduledTokenRelease) Reset()         { *m = Version2ScheduledTokenRelease{} }
func (m *Version2ScheduledTokenRelease) String() string { return proto.CompactTextString(m) }
func (*Version2ScheduledTokenRelease) ProtoMessage()    {}
func (*Version2ScheduledTokenRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_06339c129491fd39, []int{4}
}
func (m *Version2ScheduledTokenRelease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version2ScheduledTokenRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version2ScheduledTokenRelease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Version2ScheduledTokenRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version2ScheduledTokenRelease.Merge(m, src)
}
func (m *Version2ScheduledTokenRelease) XXX_Size() int {
	return m.Size()
}
func (m *Version2ScheduledTokenRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_Version2ScheduledTokenRelease.DiscardUnknown(m)
}

var xxx_messageInfo_Version2ScheduledTokenRelease proto.InternalMessageInfo

func (m *Version2ScheduledTokenRelease) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Version2ScheduledTokenRelease) GetTokenReleaseAmount() int64 {
	if m != nil {
		return m.TokenReleaseAmount
	}
	return 0
}

// Params holds parameters for the mint module.
type Version2Params struct {
	// type of coin to mint
	MintDenom string `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	// List of token release schedules
	TokenReleaseSchedule []Version2ScheduledTokenRelease `protobuf:"bytes,2,rep,name=token_release_schedule,json=tokenReleaseSchedule,proto3" json:"token_release_schedule" yaml:"token_release_schedule"`
}

func (m *Version2Params) Reset()      { *m = Version2Params{} }
func (*Version2Params) ProtoMessage() {}
func (*Version2Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_06339c129491fd39, []int{5}
}
func (m *Version2Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version2Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version2Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Version2Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version2Params.Merge(m, src)
}
func (m *Version2Params) XXX_Size() int {
	return m.Size()
}
func (m *Version2Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Version2Params.DiscardUnknown(m)
}

var xxx_messageInfo_Version2Params proto.InternalMessageInfo

func (m *Version2Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *Version2Params) GetTokenReleaseSchedule() []Version2ScheduledTokenRelease {
	if m != nil {
		return m.TokenReleaseSchedule
	}
	return nil
}

func init() {
	proto.RegisterType((*Minter)(nil), "mint.v1beta1.Minter")
	proto.RegisterType((*ScheduledTokenRelease)(nil), "mint.v1beta1.ScheduledTokenRelease")
	proto.RegisterType((*Params)(nil), "mint.v1beta1.Params")
	proto.RegisterType((*Version2Minter)(nil), "mint.v1beta1.Version2Minter")
	proto.RegisterType((*Version2ScheduledTokenRelease)(nil), "mint.v1beta1.Version2ScheduledTokenRelease")
	proto.RegisterType((*Version2Params)(nil), "mint.v1beta1.Version2Params")
}

func init() { proto.RegisterFile("mint/v1beta1/mint.proto", fileDescriptor_06339c129491fd39) }

var fileDescriptor_06339c129491fd39 = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xe3, 0x24, 0x4d, 0xdb, 0x7d, 0xab, 0xbc, 0xc5, 0x24, 0x34, 0x05, 0xc5, 0x8e, 0x16,
	0xa8, 0x22, 0x2a, 0x62, 0x9a, 0xde, 0x7a, 0x41, 0x84, 0x54, 0x02, 0x21, 0x24, 0x14, 0x50, 0x0f,
	0x5c, 0xa2, 0x4d, 0xbc, 0x4a, 0x56, 0x89, 0x77, 0x2b, 0xef, 0x06, 0xd1, 0x1b, 0x12, 0x17, 0x8e,
	0x1c, 0x39, 0xf2, 0x11, 0x10, 0x12, 0x77, 0x8e, 0x3d, 0xf6, 0x88, 0x38, 0x58, 0x28, 0xf9, 0x06,
	0xf9, 0x04, 0x68, 0xc7, 0x0e, 0xb5, 0x53, 0xf3, 0x47, 0x82, 0x93, 0xd7, 0x33, 0xe3, 0x67, 0xe6,
	0xf1, 0xfc, 0x6c, 0xb4, 0xe5, 0x31, 0xae, 0x9c, 0x17, 0x7b, 0x3d, 0xaa, 0xc8, 0x9e, 0xa3, 0x6f,
	0x1a, 0xc7, 0xbe, 0x50, 0xc2, 0xdc, 0x80, 0x73, 0x94, 0xb8, 0x5a, 0x1a, 0x88, 0x81, 0x80, 0x84,
	0xa3, 0x4f, 0x61, 0x0d, 0xfe, 0x98, 0x45, 0x85, 0xc7, 0x8c, 0x2b, 0xea, 0x9b, 0x55, 0x84, 0xa4,
	0x22, 0xbe, 0xea, 0xba, 0x44, 0xd1, 0x8a, 0x51, 0x33, 0xea, 0xeb, 0x9d, 0x75, 0x88, 0xb4, 0x89,
	0xa2, 0xe6, 0x36, 0x5a, 0xa3, 0xdc, 0x0d, 0x93, 0x59, 0x48, 0xae, 0x52, 0xee, 0x42, 0xaa, 0x84,
	0x56, 0x5c, 0xca, 0x85, 0x57, 0xc9, 0x41, 0x3c, 0xbc, 0x31, 0x6f, 0xa1, 0x4b, 0x4a, 0x28, 0x32,
	0xee, 0xea, 0x31, 0xba, 0xc4, 0x13, 0x13, 0xae, 0x2a, 0xf9, 0x9a, 0x51, 0xcf, 0x77, 0xfe, 0x87,
	0x84, 0xee, 0x7b, 0x0f, 0xc2, 0x66, 0x13, 0x95, 0x7d, 0xea, 0x11, 0xc6, 0x19, 0x1f, 0x24, 0xea,
	0x57, 0xa0, 0xfe, 0xf2, 0x8f, 0x64, 0xec, 0x99, 0x3a, 0xda, 0x1c, 0x13, 0xa9, 0x12, 0xe5, 0x05,
	0x28, 0x2f, 0xea, 0x78, 0xac, 0xf2, 0x06, 0x2a, 0x9e, 0x57, 0x82, 0x81, 0x55, 0x18, 0x74, 0x63,
	0x51, 0x07, 0x2e, 0x12, 0x7a, 0x43, 0xca, 0x06, 0x43, 0x55, 0x59, 0x4b, 0xea, 0x3d, 0x80, 0x28,
	0x7e, 0x6d, 0xa0, 0xf2, 0xd3, 0xfe, 0x90, 0xba, 0x93, 0x31, 0x75, 0x9f, 0x89, 0x11, 0xe5, 0x1d,
	0x3a, 0xa6, 0x44, 0xd2, 0xbf, 0x78, 0x87, 0x77, 0x50, 0x49, 0x69, 0xa5, 0xae, 0x1f, 0x4a, 0x2d,
	0x1c, 0xe5, 0x60, 0x02, 0x53, 0xc5, 0xba, 0x84, 0xae, 0xf0, 0x07, 0x03, 0x15, 0x9e, 0x10, 0x9f,
	0x78, 0x52, 0xb7, 0x0d, 0xbd, 0xc1, 0x16, 0xa2, 0xb6, 0x3a, 0xd2, 0x86, 0x4d, 0xbc, 0x32, 0xd0,
	0x95, 0xa4, 0xb8, 0x8c, 0xa6, 0xaf, 0x64, 0x6b, 0xb9, 0xfa, 0x7f, 0xcd, 0xeb, 0x8d, 0x38, 0x2a,
	0x8d, 0x54, 0x6f, 0xad, 0x9b, 0xa7, 0x81, 0x9d, 0x99, 0x07, 0x76, 0xf5, 0x84, 0x78, 0xe3, 0x03,
	0x9c, 0x2e, 0x88, 0x3b, 0xa5, 0xf8, 0xa8, 0x0b, 0xa5, 0x83, 0xfc, 0xbb, 0xf7, 0x76, 0x06, 0x7f,
	0xca, 0xa2, 0xe2, 0x11, 0xf5, 0x25, 0x13, 0xbc, 0x19, 0x51, 0x27, 0x53, 0xb6, 0x08, 0x06, 0x5a,
	0x0f, 0x75, 0xbf, 0xaf, 0x81, 0xbd, 0x33, 0x60, 0x6a, 0x38, 0xe9, 0x35, 0xfa, 0xc2, 0x73, 0xfa,
	0x42, 0x7a, 0x42, 0x46, 0x97, 0xdb, 0xd2, 0x1d, 0x39, 0xea, 0xe4, 0x98, 0xca, 0x46, 0x9b, 0xf6,
	0xe7, 0x81, 0xbd, 0x15, 0x4e, 0xb6, 0xac, 0x87, 0x2f, 0x00, 0x71, 0xf7, 0x02, 0x10, 0xb0, 0x8d,
	0xd6, 0xf6, 0x3c, 0xb0, 0xcb, 0xcb, 0x22, 0x3a, 0x8f, 0x97, 0x58, 0x39, 0x4c, 0x61, 0x45, 0x6f,
	0x2a, 0xd7, 0xba, 0x96, 0x36, 0x47, 0x58, 0x81, 0x97, 0x41, 0x32, 0x77, 0x16, 0x1f, 0x4e, 0x1e,
	0xda, 0x6f, 0xce, 0x03, 0x7b, 0x23, 0x7c, 0x16, 0xc2, 0x38, 0xfa, 0x94, 0x30, 0x45, 0xd5, 0xc5,
	0x6b, 0x4b, 0xe7, 0xce, 0x44, 0xf9, 0x18, 0x71, 0x70, 0xfe, 0x29, 0x51, 0xda, 0x6a, 0x2e, 0x95,
	0xa8, 0xcf, 0xc6, 0xf9, 0x7a, 0xfe, 0x8c, 0xac, 0x37, 0xbf, 0x23, 0x6b, 0x37, 0x49, 0xd6, 0x2f,
	0x5d, 0xfc, 0x03, 0xc2, 0x5a, 0x87, 0xa7, 0x53, 0xcb, 0x38, 0x9b, 0x5a, 0xc6, 0xb7, 0xa9, 0x65,
	0xbc, 0x9d, 0x59, 0x99, 0xb3, 0x99, 0x95, 0xf9, 0x32, 0xb3, 0x32, 0xcf, 0x77, 0x63, 0x18, 0x3d,
	0x62, 0xec, 0xfe, 0x90, 0x30, 0xee, 0x8c, 0x18, 0xeb, 0xeb, 0xc3, 0xd1, 0xbe, 0xf3, 0x12, 0x7e,
	0x9d, 0x21, 0x4f, 0xbd, 0x02, 0xfc, 0x1d, 0xf7, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0xba, 0x63,
	0xde, 0xdc, 0x5c, 0x05, 0x00, 0x00,
}

func (m *Minter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastMintHeight != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.LastMintHeight))
		i--
		dAtA[i] = 0x40
	}
	if len(m.LastMintDate) > 0 {
		i -= len(m.LastMintDate)
		copy(dAtA[i:], m.LastMintDate)
		i = encodeVarintMint(dAtA, i, uint64(len(m.LastMintDate)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LastMintAmount != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.LastMintAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.RemainingMintAmount != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.RemainingMintAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalMintAmount != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.TotalMintAmount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMint(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EndDate) > 0 {
		i -= len(m.EndDate)
		copy(dAtA[i:], m.EndDate)
		i = encodeVarintMint(dAtA, i, uint64(len(m.EndDate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartDate) > 0 {
		i -= len(m.StartDate)
		copy(dAtA[i:], m.StartDate)
		i = encodeVarintMint(dAtA, i, uint64(len(m.StartDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduledTokenRelease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledTokenRelease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledTokenRelease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenReleaseAmount != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.TokenReleaseAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EndDate) > 0 {
		i -= len(m.EndDate)
		copy(dAtA[i:], m.EndDate)
		i = encodeVarintMint(dAtA, i, uint64(len(m.EndDate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartDate) > 0 {
		i -= len(m.StartDate)
		copy(dAtA[i:], m.StartDate)
		i = encodeVarintMint(dAtA, i, uint64(len(m.StartDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenReleaseSchedule) > 0 {
		for iNdEx := len(m.TokenReleaseSchedule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenReleaseSchedule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintMint(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Version2Minter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version2Minter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version2Minter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMint(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastMintHeight != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.LastMintHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LastMintDate) > 0 {
		i -= len(m.LastMintDate)
		copy(dAtA[i:], m.LastMintDate)
		i = encodeVarintMint(dAtA, i, uint64(len(m.LastMintDate)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.LastMintAmount.Size()
		i -= size
		if _, err := m.LastMintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Version2ScheduledTokenRelease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version2ScheduledTokenRelease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version2ScheduledTokenRelease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenReleaseAmount != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.TokenReleaseAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintMint(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Version2Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version2Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version2Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenReleaseSchedule) > 0 {
		for iNdEx := len(m.TokenReleaseSchedule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenReleaseSchedule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintMint(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMint(dAtA []byte, offset int, v uint64) int {
	offset -= sovMint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Minter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartDate)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.EndDate)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.TotalMintAmount != 0 {
		n += 1 + sovMint(uint64(m.TotalMintAmount))
	}
	if m.RemainingMintAmount != 0 {
		n += 1 + sovMint(uint64(m.RemainingMintAmount))
	}
	if m.LastMintAmount != 0 {
		n += 1 + sovMint(uint64(m.LastMintAmount))
	}
	l = len(m.LastMintDate)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.LastMintHeight != 0 {
		n += 1 + sovMint(uint64(m.LastMintHeight))
	}
	return n
}

func (m *ScheduledTokenRelease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartDate)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.EndDate)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.TokenReleaseAmount != 0 {
		n += 1 + sovMint(uint64(m.TokenReleaseAmount))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if len(m.TokenReleaseSchedule) > 0 {
		for _, e := range m.TokenReleaseSchedule {
			l = e.Size()
			n += 1 + l + sovMint(uint64(l))
		}
	}
	return n
}

func (m *Version2Minter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LastMintAmount.Size()
	n += 1 + l + sovMint(uint64(l))
	l = len(m.LastMintDate)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.LastMintHeight != 0 {
		n += 1 + sovMint(uint64(m.LastMintHeight))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	return n
}

func (m *Version2ScheduledTokenRelease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.TokenReleaseAmount != 0 {
		n += 1 + sovMint(uint64(m.TokenReleaseAmount))
	}
	return n
}

func (m *Version2Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if len(m.TokenReleaseSchedule) > 0 {
		for _, e := range m.TokenReleaseSchedule {
			l = e.Size()
			n += 1 + l + sovMint(uint64(l))
		}
	}
	return n
}

func sovMint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMint(x uint64) (n int) {
	return sovMint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Minter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMintAmount", wireType)
			}
			m.TotalMintAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMintAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingMintAmount", wireType)
			}
			m.RemainingMintAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingMintAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMintAmount", wireType)
			}
			m.LastMintAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMintAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMintDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastMintDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMintHeight", wireType)
			}
			m.LastMintHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMintHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledTokenRelease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledTokenRelease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledTokenRelease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenReleaseAmount", wireType)
			}
			m.TokenReleaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenReleaseAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenReleaseSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenReleaseSchedule = append(m.TokenReleaseSchedule, ScheduledTokenRelease{})
			if err := m.TokenReleaseSchedule[len(m.TokenReleaseSchedule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version2Minter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version2Minter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version2Minter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastMintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMintDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastMintDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMintHeight", wireType)
			}
			m.LastMintHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMintHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version2ScheduledTokenRelease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version2ScheduledTokenRelease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version2ScheduledTokenRelease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenReleaseAmount", wireType)
			}
			m.TokenReleaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenReleaseAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version2Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version2Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version2Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenReleaseSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenReleaseSchedule = append(m.TokenReleaseSchedule, Version2ScheduledTokenRelease{})
			if err := m.TokenReleaseSchedule[len(m.TokenReleaseSchedule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMint = fmt.Errorf("proto: unexpected end of group")
)
